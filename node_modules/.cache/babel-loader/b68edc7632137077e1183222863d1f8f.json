{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/axios\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(`${process.env.REACT_APP_API_URL_REGISTER}`, userData).then(res => history.push(\"/signin\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(`https://eyedentity-socialmedia.herokuapp.com/users/login`, userData).then(res => {\n    // Save to localStorage Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"x-access-token\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"x-access\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/home/sonynurdianto/Documents/eyedentity_frontend/src/actioncreators/auth.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","process","env","REACT_APP_API_URL_REGISTER","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAAQC,UAAR,EAAoBC,gBAApB,EAAsCC,YAAtC,QAAyD,SAAzD,C,CACA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC3DT,EAAAA,KAAK,CACAU,IADL,CACW,GAAEC,OAAO,CAACC,GAAR,CAAYC,0BAA2B,EADpD,EACuDN,QADvD,EAEKO,IAFL,CAEUC,GAAG,IAAIP,OAAO,CAACQ,IAAR,CAAa,SAAb,CAFjB,EAE0C;AAF1C,GAGKC,KAHL,CAGWC,GAAG,IAAIT,QAAQ,CAAC;AAACU,IAAAA,IAAI,EAAEhB,UAAP;AAAmBiB,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAAzC,GAAD,CAH1B;AAIH,CALM,C,CAMP;;AACA,OAAO,MAAMC,SAAS,GAAGhB,QAAQ,IAAIE,QAAQ,IAAI;AAC7CT,EAAAA,KAAK,CACAU,IADL,CACW,0DADX,EACsEH,QADtE,EAEKO,IAFL,CAEUC,GAAG,IAAI;AACT;AACA,UAAM;AAACS,MAAAA;AAAD,QAAUT,GAAG,CAACO,IAApB;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCF,KAAvC,EAHS,CAIT;;AACAvB,IAAAA,YAAY,CAACuB,KAAD,CAAZ,CALS,CAMT;;AACA,UAAMG,OAAO,GAAGzB,UAAU,CAACsB,KAAD,CAA1B,CAPS,CAQT;;AACAf,IAAAA,QAAQ,CAACmB,cAAc,CAACD,OAAD,CAAf,CAAR;AACH,GAZL,EAaKV,KAbL,CAaWC,GAAG,IAAIT,QAAQ,CAAC;AAACU,IAAAA,IAAI,EAAEhB,UAAP;AAAmBiB,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAAzC,GAAD,CAb1B;AAcH,CAfM,C,CAgBP;;AACA,OAAO,MAAMM,cAAc,GAAGD,OAAO,IAAI;AACrC,SAAO;AAACR,IAAAA,IAAI,EAAEf,gBAAP;AAAyBgB,IAAAA,OAAO,EAAEO;AAAlC,GAAP;AACH,CAFM,C,CAGP;;AACA,OAAO,MAAME,cAAc,GAAG,MAAM;AAChC,SAAO;AAACV,IAAAA,IAAI,EAAEd;AAAP,GAAP;AACH,CAFM,C,CAGP;;AACA,OAAO,MAAMyB,UAAU,GAAG,MAAMrB,QAAQ,IAAI;AACxC;AACAgB,EAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB,EAFwC,CAGxC;;AACA9B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJwC,CAKxC;;AACAQ,EAAAA,QAAQ,CAACmB,cAAc,CAAC,EAAD,CAAf,CAAR;AACH,CAPM","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/axios\";\nimport jwt_decode from \"jwt-decode\";\nimport {GET_ERRORS, SET_CURRENT_USER, USER_LOADING} from \"./types\";\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n    axios\n        .post(`${process.env.REACT_APP_API_URL_REGISTER}`, userData)\n        .then(res => history.push(\"/signin\")) // re-direct to login on successful register\n        .catch(err => dispatch({type: GET_ERRORS, payload: err.response.data}));\n};\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n    axios\n        .post(`https://eyedentity-socialmedia.herokuapp.com/users/login`, userData)\n        .then(res => {\n            // Save to localStorage Set token to localStorage\n            const {token} = res.data;\n            localStorage.setItem(\"x-access-token\", token);\n            // Set token to Auth header\n            setAuthToken(token);\n            // Decode token to get user data\n            const decoded = jwt_decode(token);\n            // Set current user\n            dispatch(setCurrentUser(decoded));\n        })\n        .catch(err => dispatch({type: GET_ERRORS, payload: err.response.data}));\n};\n// Set logged in user\nexport const setCurrentUser = decoded => {\n    return {type: SET_CURRENT_USER, payload: decoded};\n};\n// User loading\nexport const setUserLoading = () => {\n    return {type: USER_LOADING};\n};\n// Log user out\nexport const logoutUser = () => dispatch => {\n    // Remove token from local storage\n    localStorage.removeItem(\"x-access\");\n    // Remove auth header for future requests\n    setAuthToken(false);\n    // Set current user to empty object {} which will set isAuthenticated to false\n    dispatch(setCurrentUser({}));\n};"]},"metadata":{},"sourceType":"module"}